#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <sys/select.h>
#include <arpa/inet.h>
#define PORT 8080
#define MAX_CLIENTS 10
int main()
{
    int tcp_fd,udp_fd, new_socket, client_socket[MAX_CLIENTS];
    struct sockaddr_in address;
    int addrlen = sizeof(address);

    fd_set readfds;
    int max_sd, sd, activity, i, valread;
    char buffer[1025];

    // Clear client sockets list
    for (i = 0; i < MAX_CLIENTS; i++) client_socket[i] = 0;

    // Create server socket
    tcp_fd = socket(AF_INET, SOCK_STREAM, 0);
    udp_fd = socket(AF_INET, SOCK_DGRAM, 0);
    // Bind to address and port
    address.sin_family = AF_INET;
    address.sin_addr.s_addr = INADDR_ANY;
    address.sin_port = htons(PORT);
    bind(tcp_fd, (struct sockaddr *)&address, sizeof(address));
bind(udp_fd, (struct sockaddr *)&address, sizeof(address));
    // Listen for connections
    listen(tcp_fd, 3);

    printf("Server listening on port %d...\n", PORT);

    while (1)
    {
        // Clear and set up the read set
        FD_ZERO(&readfds);
        FD_SET(tcp_fd, &readfds);
        FD_SET(udp_fd, &readfds);
        max_sd = tcp_fd;

        // Add client sockets to set
        for (i = 0; i < MAX_CLIENTS; i++)
        {
            sd = client_socket[i];
            if (sd > 0) FD_SET(sd, &readfds);
            if (sd > max_sd) max_sd = sd;
        }

        // Wait for activity
        activity = select(max_sd + 1, &readfds, NULL, NULL, NULL);


        // Incoming connection
        if (FD_ISSET(tcp_fd, &readfds))

        {
        if(sizeof(client_socket)>MAX_CLIENTS)
        {close(sd);
        printf("full client %d\n", MAX_CLIENTS);}
            new_socket = accept(server_fd, (struct sockaddr *)&address, (socklen_t *)&addrlen);
            printf("New connection: socket fd is %d\n", new_socket);

            // Add to client list
            for (i = 0; i < MAX_CLIENTS; i++)
            {
                if (client_socket[i] == 0)
                {
                    client_socket[i] = new_socket;
                    break;
                }
            }
        }

        // Check clients
        for (i = 0; i < MAX_CLIENTS; i++)
        {
            sd = client_socket[i];
            if (FD_ISSET(sd, &readfds))
            {
                valread = read(sd, buffer, 1024);
                if (valread == 0)
                {
                    // Disconnected
                    getpeername(sd, (struct sockaddr *)&address, (socklen_t *)&addrlen);
                    printf("Client disconnected: ip %s, port %d\n",
                           inet_ntoa(address.sin_addr), ntohs(address.sin_port));
                    close(sd);
                    client_socket[i] = 0;
                }
                else
                {
                    // Echo back
                    buffer[valread] = '\0';
                    printf("Received: %s", buffer);
                    send(sd, buffer, strlen(buffer), 0);
                    sendto(udp_fd,buffer,strlen(buffer),0,(struct sockaddr *)&udp_client_addr, udp_client_len);)
                }
               /* else if(strncmp(buffer,"quit",4)==0)
                {
                    close(sd);
                    client_socket[i] = 0;
                }
*/
            }
        }
    }

    return 0;
}
